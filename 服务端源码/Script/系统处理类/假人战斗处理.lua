--======================================================================--
-- 长安战斗假人处理类
-- 处理玩家与假人的战斗交互
--======================================================================--

-- 配置常量
local 战斗配置 = {
    最大战斗距离 = 6000,
    最低战斗力 = 5000,
    最大队伍人数 = 5,
    等级范围 = {最小 = 60, 最大 = 180},
    属性随机范围 = {最小 = 8, 最大 = 12},
    修炼加成 = {攻击 = 20, 防御 = 15, 法术 = 20, 抗法 = 15},
    宝宝修炼加成 = {攻击 = 15, 防御 = 15, 法术 = 15, 抗法 = 15},
    奖励循环次数 = 5,
    经验奖励范围 = {最小 = 100000, 最大 = 200000},
    银子奖励范围 = {最小 = 50000, 最大 = 100000},
    道具奖励数量范围 = {最小 = 1, 最大 = 10},
    -- 冷却时间配置
    冷却时间配置 = {
        默认冷却时间 = 3600, -- 1小时
        不同难度冷却时间 = {
            [1] = 1800, -- 简单30分钟
            [2] = 3600, -- 普通1小时
            [3] = 5400, -- 困难1.5小时
            [4] = 7200, -- 地狱2小时
            [5] = 10800 -- 噩梦3小时
        }
    },
    -- 挑战次数限制配置
    挑战次数配置 = {
        默认每日限制 = 5, -- 默认每日5次
        不同难度限制 = {
            [1] = 10, -- 简单每日10次
            [2] = 5,  -- 普通每日5次
            [3] = 3,  -- 困难每日3次
            [4] = 2,  -- 地狱每日2次
            [5] = 1   -- 噩梦每日1次
        },
        无限制标记 = -1 -- 表示无限制
    },
    -- 奖励随机化配置
    奖励随机配置 = {
        基础随机系数 = {最小 = 0.8, 最大 = 1.2}, -- 0.8-1.2倍随机
        暴击概率 = 0.1, -- 10%概率获得双倍奖励
        暴击倍数 = 2.0, -- 暴击时奖励倍数
        不同难度随机范围 = {
            [1] = {最小 = 0.9, 最大 = 1.1}, -- 简单：0.9-1.1倍
            [2] = {最小 = 0.8, 最大 = 1.2}, -- 普通：0.8-1.2倍
            [3] = {最小 = 0.7, 最大 = 1.3}, -- 困难：0.7-1.3倍
            [4] = {最小 = 0.6, 最大 = 1.4}, -- 地狱：0.6-1.4倍
            [5] = {最小 = 0.5, 最大 = 1.5}  -- 噩梦：0.5-1.5倍
        }
    },
    -- 道具奖励配置
    道具奖励配置 = {
        道具奖励表 = {
            {"进化丹", {1, 10}},
            {"魔化丹", {1, 10}},
            {"造灵丹", {1, 8}},
            {"觉醒丹", {1, 5}},
            {"随机强化丹", {1, 3}},
            {"特殊兽决碎片", {1, 2}},
            {"仙玉", {100, 1000}},
            {"银子", {10000, 50000}}
        },
        不同难度道具概率 = {
            [1] = {进化丹 = 0.3, 魔化丹 = 0.3, 造灵丹 = 0.2, 仙玉 = 0.1, 银子 = 0.1}, -- 简单
            [2] = {进化丹 = 0.25, 魔化丹 = 0.25, 造灵丹 = 0.2, 觉醒丹 = 0.15, 仙玉 = 0.1, 银子 = 0.05}, -- 普通
            [3] = {进化丹 = 0.2, 魔化丹 = 0.2, 造灵丹 = 0.2, 觉醒丹 = 0.2, 随机强化丹 = 0.15, 仙玉 = 0.05}, -- 困难
            [4] = {进化丹 = 0.15, 魔化丹 = 0.15, 造灵丹 = 0.15, 觉醒丹 = 0.2, 随机强化丹 = 0.2, 特殊兽决碎片 = 0.1, 仙玉 = 0.05}, -- 地狱
            [5] = {进化丹 = 0.1, 魔化丹 = 0.1, 造灵丹 = 0.15, 觉醒丹 = 0.2, 随机强化丹 = 0.25, 特殊兽决碎片 = 0.15, 仙玉 = 0.05} -- 噩梦
        }
    }
}

local 假人战斗处理类 = class()

function 假人战斗处理类:初始化()
    self.调试模式 = false -- 控制调试输出
    print("[调试] 假人战斗处理类开始初始化")
    self.假人战斗映射 = {} -- 假人ID到假人数据的映射
    self.战斗中假人 = {} -- 记录正在战斗中的假人
    self.假人冷却时间 = {} -- 记录假人冷却时间
    self.假人挑战次数 = {} -- 记录每个玩家对每个假人的挑战次数
    self.难度配置 = {
        [1] = {名称="简单", 属性倍率=0.8, 奖励倍率=1.0, 颜色="#G"},
        [2] = {名称="普通", 属性倍率=1.0, 奖励倍率=1.2, 颜色="#Y"},
        [3] = {名称="困难", 属性倍率=1.3, 奖励倍率=1.5, 颜色="#B"},
        [4] = {名称="地狱", 属性倍率=1.6, 奖励倍率=2.0, 颜色="#R"},
        [5] = {名称="噩梦", 属性倍率=2.0, 奖励倍率=3.0, 颜色="#P"}
    }
    print("[调试] 假人战斗处理类初始化完成")
end

-- 调试日志函数
function 假人战斗处理类:调试日志(消息)
    if self.调试模式 then
        print("[假人战斗调试] " .. 消息)
    end
end

-- 设置调试模式
function 假人战斗处理类:设置调试模式(启用)
    self.调试模式 = 启用
    self:调试日志("调试模式已" .. (启用 and "启用" or "禁用"))
end

-- 注册假人为可战斗单位
function 假人战斗处理类:注册假人(假人数据)
    if 假人数据 and 假人数据.id then
        self.假人战斗映射[假人数据.id] = 假人数据
        self:调试日志("注册假人：" .. 假人数据.名称 .. " ID:" .. 假人数据.id)
    end
end

-- 查找假人数据
function 假人战斗处理类:查找假人数据(假人id)
    -- 从假人玩家类中查找
    if 假人玩家类 and 假人玩家类.假人单位 then
        for _, 假人 in pairs(假人玩家类.假人单位) do
            if 假人.id == 假人id then
                return 假人
            end
        end
    end

    -- 从长安战斗假人中查找
    if 假人玩家类 and 假人玩家类.长安战斗假人 then
        for _, 假人 in pairs(假人玩家类.长安战斗假人) do
            if 假人.id == 假人id then
                return 假人
            end
        end
    end

    -- 从摆摊假人中查找
    if 摆摊假人类 and 摆摊假人类.假人单位 then
        for 地图, 假人列表 in pairs(摆摊假人类.假人单位) do
            for _, 假人 in pairs(假人列表) do
                if 假人.id == 假人id then
                    return 假人 -- 返回摆摊假人数据，让上层函数判断是否为摆摊状态
                end
            end
        end
    end

    return nil
end

-- 处理玩家攻击假人
function 假人战斗处理类:处理攻击假人(玩家id, 假人id)
    self:调试日志("处理攻击假人被调用，玩家ID:" .. 玩家id .. " 假人ID:" .. 假人id)

    -- 参数验证
    if not 玩家id or not 假人id then
        self:调试日志("参数错误：玩家ID或假人ID为空")
        return false
    end

    -- 查找假人数据
    local 假人数据 = self.假人战斗映射[假人id]
    self:调试日志("从假人战斗映射查找结果:" .. (假人数据 and "找到" or "未找到"))

    if not 假人数据 then
        -- 尝试从假人玩家类中查找
        self:调试日志("尝试从假人玩家类中查找假人")
        假人数据 = self:查找假人数据(假人id)
        self:调试日志("从假人玩家类查找结果:" .. (假人数据 and "找到" or "未找到"))

        if not 假人数据 then
            self:调试日志("找不到假人数据，假人ID:" .. 假人id)
            常规提示(玩家id, "#Y/找不到该假人！")
            return false
        else
            self:调试日志("找到假人数据:" .. 假人数据.名称 .. " 模型:" .. 假人数据.模型)

            -- 检查是否为摆摊假人
            if 假人数据.摆摊数据 then
                self:调试日志("找到摆摊假人:" .. 假人数据.名称 .. "，禁止攻击")
                常规提示(玩家id, "#Y/" .. 假人数据.名称 .. "正在摆摊，禁止攻击！")
                return false
            end
        end
    end

    -- 检查玩家状态
    if not 玩家数据[玩家id] then
        self:调试日志("玩家数据不存在，玩家ID:" .. 玩家id)
        return false
    end

    -- 检查玩家是否在队伍中（必须组队才能PK）
    if not 玩家数据[玩家id].队伍 or 玩家数据[玩家id].队伍 == 0 then
        常规提示(玩家id, "#Y/必须组队后才能挑战假人！")
        return true
    end

    if 玩家数据[玩家id].战斗 and 玩家数据[玩家id].战斗 ~= 0 then
        常规提示(玩家id, "#Y/你正在战斗中，无法挑战假人！")
        return true
    end

    if 玩家数据[玩家id].角色.数据.战斗开关 then
        常规提示(玩家id, "#Y/你正在战斗中，无法挑战假人！")
        return true
    end

    -- 检查假人状态
    if self.战斗中假人[假人id] then
        self:调试日志("假人正在战斗中，假人ID:" .. 假人id .. "，假人名称:" .. 假人数据.名称)
        常规提示(玩家id, "#Y/" .. 假人数据.名称 .. "正在战斗中，请稍后再试！")
        return false
    end

    -- 检查假人冷却时间
    if self:检查假人冷却时间(假人id, 假人数据.名称, 玩家id) then
        return false
    end

    -- 检查挑战次数限制
    if not self:检查挑战次数限制(玩家id, 假人id, 难度等级) then
        return false
    end

    -- 检查距离
    local 距离 = 取两点距离(玩家数据[玩家id].角色.数据.地图数据, 假人数据)
    if 距离 > 战斗配置.最大战斗距离 then
        常规提示(玩家id, "#Y/距离" .. 假人数据.名称 .. "太远，无法挑战！")
        return false
    end

    -- 记录挑战次数
    self:记录挑战次数(玩家id, 假人id)

    -- 创建战斗
    self:创建假人战斗(玩家id, 假人数据)
    return true
end

-- 创建假人战斗
function 假人战斗处理类:创建假人战斗(玩家id, 假人数据)
    -- 随机生成战斗难度
    local 难度等级 = 取随机数(1, 5)
    local 难度信息 = self.难度配置[难度等级]

    -- 计算玩家战斗力用于"遇强则强"
    local 玩家战斗力 = self:计算玩家战斗力(玩家id)
    local 实力调整系数 = math.min(math.max(玩家战斗力 / 1000, 0.5), 2.0)

    -- 判断战斗模式：单挑还是组队
    local 假人队伍 = {}
    local 是组队模式 = false
    local 假人id列表 = {
        难度名称 = 难度信息.名称,
        奖励倍率 = 难度信息.奖励倍率,
        难度等级 = 难度等级,
        假人名称 = 假人数据.名称,
        假人id = {}
    }

    -- 检查假人是否有队长标志或队伍ID
    if (假人数据.队长 and 假人数据.队伍id) or 假人数据.队伍id then
        -- 组队模式：获取整个假人队伍（1-5人）
        假人队伍 = self:获取假人队伍成员(假人数据.队伍id)
        是组队模式 = true

        -- 如果队伍成员超过5人，只取前5人
        if #假人队伍 > 战斗配置.最大队伍人数 then
            local 临时队伍 = {}
            for i = 1, 战斗配置.最大队伍人数 do
                table.insert(临时队伍, 假人队伍[i])
            end
            假人队伍 = 临时队伍
        end

        -- 设置整个队伍为战斗状态
        for _, 队员 in ipairs(假人队伍) do
            self:设置假人战斗状态(队员.id, true)
            table.insert(假人id列表.假人id, 队员.id)
        end

        -- 组队模式下，使用队伍名称或主要假人名称
        if #假人队伍 > 1 then
            假人id列表.假人名称 = 假人数据.名称 .. "的队伍"
        end
    else
        -- 单挑模式
        table.insert(假人队伍, 假人数据)
        self:设置假人战斗状态(假人数据.id, true)
        table.insert(假人id列表.假人id, 假人数据.id)
    end

    -- 生成假人战斗属性
    local 假人属性列表 = {}
    for i, 假人 in ipairs(假人队伍) do
        local 假人属性 = self:生成假人战斗属性(假人, 难度等级, 实力调整系数)
        table.insert(假人属性列表, 假人属性)
       -- table.insert(假人id列表,假人数据.id)
    end

    -- 创建战斗
    self:调试日志("假人属性表：" .. 假人属性列表[1].名称)
    self:调试日志("假人数据1:" .. 假人id列表.假人id[1])
    self:调试日志("难度等级：" .. 假人id列表.难度名称 .. "，奖励倍率：" .. 假人id列表.奖励倍率)
    self:调试日志("假人名称：" .. 假人id列表.假人名称)
    战斗准备类:创建战斗(玩家id,110099,0,nil,假人属性列表,假人id列表)

    -- 发送提示
    local 战斗类型文本 = self:获取战斗类型文本(假人数据.显示类型)
    local 队伍规模 = #假人队伍 > 1 and ("(" .. #假人队伍 .. "人队伍)") or ""
    常规提示(玩家id, "#G/与" .. 难度信息.颜色 .. "[" .. 难度信息.名称 .. "]#G " .. 战斗类型文本 .. " #R" .. 假人数据.名称 .. 队伍规模 .. "#G 的战斗开始了！")
end

-- 获取战斗类型文本
function 假人战斗处理类:获取战斗类型文本(显示类型)
    if 显示类型 == "组队战斗" then
        return "团队战斗假人"
    elseif 显示类型 == "单人战斗" then
        return "单人战斗假人"
    elseif 显示类型 == "组队普通" then
        return "组队假人"
    else
        return "普通假人"
    end
end

-- 计算玩家战斗力
function 假人战斗处理类:计算玩家战斗力(玩家id)
    local 玩家 = 玩家数据[玩家id]
    local 最终战斗力

    if not 玩家 then return 1000 end

    local 战斗力 = 0
    local 角色数据 = 玩家.角色.数据
    local 宝宝数据 = 角色数据.参战宝宝 or {} -- 确保宝宝数据存在

    -- 基础属性战斗力
    -- self.基础属性 = {"气血","魔法","命中","伤害","法伤","防御","法防","速度","最大气血","最大魔法"}
    战斗力 = 战斗力 + (角色数据.等级 or 69) * 10
    战斗力 = 战斗力 + (角色数据.最大气血 or 1500)
    战斗力 = 战斗力 + (角色数据.最大魔法 or 1500)
    战斗力 = 战斗力 + (角色数据.命中 or 1500)
    战斗力 = 战斗力 + (角色数据.伤害 or 1500)
    战斗力 = 战斗力 + (角色数据.法伤 or 1500)
    战斗力 = 战斗力 + (角色数据.防御 or 150) * 2
    战斗力 = 战斗力 + (角色数据.法防 or 150) * 2
    战斗力 = 战斗力 + (角色数据.速度 or 100) * 1.5

    -- 计算宝宝属性（优先使用最大气血/魔法）
    战斗力 = 战斗力 + (宝宝数据.最大气血 or 1500)
    战斗力 = 战斗力 + (宝宝数据.最大魔法 or 1500)
    战斗力 = 战斗力 + (宝宝数据.攻击 or 200) * 2
    战斗力 = 战斗力 + (宝宝数据.防御 or 200)
    战斗力 = 战斗力 + (宝宝数据.速度 or 200)
    战斗力 = 战斗力 + (宝宝数据.灵力 or 200)
    战斗力 = 战斗力 + (宝宝数据.体质 or 200)
    战斗力 = 战斗力 + (宝宝数据.魔力 or 200)
    战斗力 = 战斗力 + (宝宝数据.力量 or 200)
    战斗力 = 战斗力 + (宝宝数据.耐力 or 200)
    战斗力 = 战斗力 + (宝宝数据.敏捷 or 200)

    -- 修炼加成 - 增强类型检查避免算术错误
    if 角色数据.修炼 then
        local 攻击修炼 = 角色数据.修炼.攻击修炼[1] or 30
        local 防御修炼 = 角色数据.修炼.防御修炼[1] or 30
        local 法术修炼 = 角色数据.修炼.法术修炼[1] or 30
        local 抗法修炼 = 角色数据.修炼.抗法修炼[1] or 30

        -- 宝宝修炼
        local 宝宝修炼 = 角色数据.bb修炼 or {}
        local 宝宝攻击修炼 = 宝宝修炼.攻击控制力[1] or 30
        local 宝宝法术修炼 = 宝宝修炼.法术控制力[1] or 30
        local 宝宝防御修炼 = 宝宝修炼.防御控制力[1] or 30
        local 宝宝抗法修炼 = 宝宝修炼.抗法控制力[1] or 30

        -- 确保这些属性是数字类型才参与计算
        if type(攻击修炼) == "number" then
            战斗力 = 战斗力 + 攻击修炼 * 战斗配置.修炼加成.攻击 + 宝宝攻击修炼 * 战斗配置.宝宝修炼加成.攻击
        end
        if type(防御修炼) == "number" then
            战斗力 = 战斗力 + 防御修炼 * 战斗配置.修炼加成.防御 + 宝宝防御修炼 * 战斗配置.宝宝修炼加成.防御
        end
        if type(法术修炼) == "number" then
            战斗力 = 战斗力 + 法术修炼 * 战斗配置.修炼加成.法术 + 宝宝法术修炼 * 战斗配置.宝宝修炼加成.法术
        end
        if type(抗法修炼) == "number" then
            战斗力 = 战斗力 + 抗法修炼 * 战斗配置.修炼加成.抗法 + 宝宝抗法修炼 * 战斗配置.宝宝修炼加成.抗法
        end
    end
    if self.调试模式 then
        战斗力=10
        战斗配置.最低战斗力=5
    end
    return math.max(战斗力, 战斗配置.最低战斗力) -- 最低战斗力
end

-- 获取假人队伍成员
function 假人战斗处理类:获取假人队伍成员(队伍id)
    local 队伍成员 = {}

    -- 从假人玩家类中查找队伍成员
    if 假人玩家类 and 假人玩家类.假人单位 then
        for _, 假人 in pairs(假人玩家类.假人单位) do
            if 假人.队伍id == 队伍id then
                table.insert(队伍成员, 假人)
            end
        end
    end

    -- 从长安战斗假人中查找队伍成员
    if 假人玩家类 and 假人玩家类.长安战斗假人 then
        for _, 假人 in pairs(假人玩家类.长安战斗假人) do
            if 假人.队伍id == 队伍id then
                table.insert(队伍成员, 假人)
            end
        end
    end

    -- 按队内序号排序
    table.sort(队伍成员, function(a, b)
        return (a.队内序号 or 1) < (b.队内序号 or 1)
    end)

    return 队伍成员
end

-- 设置假人战斗状态
function 假人战斗处理类:设置假人战斗状态(假人id, 状态)
    if 状态 then
        self.战斗中假人[假人id] = true
        self:调试日志("设置假人战斗状态为战斗中，假人ID:" .. 假人id)
    else
        self.战斗中假人[假人id] = nil
        self:调试日志("清理假人战斗状态，假人ID:" .. 假人id)
    end
end

-- 检查假人冷却时间
function 假人战斗处理类:检查假人冷却时间(假人id, 假人名称, 玩家id)
    -- 先清理过期的冷却时间
    self:清理过期冷却时间()

    local 冷却时间 = self.假人冷却时间[假人id]
    if 冷却时间 and os.time() < 冷却时间 then
        local 剩余时间 = 冷却时间 - os.time()
        local 剩余分钟 = math.ceil(剩余时间 / 60)
        常规提示(玩家id, "#Y/" .. 假人名称 .. "刚被打败，还需要等待#R" .. 剩余分钟 .. "#Y分钟才能再次挑战")
        return true -- 在冷却中
    end
    return false -- 不在冷却中
end

-- 设置假人冷却时间
function 假人战斗处理类:设置假人冷却时间(假人id, 难度等级)
    -- 根据难度等级设置冷却时间
    local 冷却时间 = 战斗配置.冷却时间配置.不同难度冷却时间[难度等级] or 战斗配置.冷却时间配置.默认冷却时间
    self.假人冷却时间[假人id] = os.time() + 冷却时间
    self:调试日志("设置假人冷却时间，假人ID:" .. 假人id .. "，难度等级:" .. 难度等级 .. "，冷却时间:" .. 冷却时间 .. "秒")
end

-- 清理过期冷却时间
function 假人战斗处理类:清理过期冷却时间()
    local 当前时间 = os.time()
    local 清理数量 = 0

    for 假人id, 冷却时间 in pairs(self.假人冷却时间) do
        if 当前时间 >= 冷却时间 then
            self.假人冷却时间[假人id] = nil
            清理数量 = 清理数量 + 1
        end
    end

    if 清理数量 > 0 then
        self:调试日志("清理过期冷却时间，清理数量:" .. 清理数量)
    end
end

-- 获取假人冷却状态信息
function 假人战斗处理类:获取假人冷却状态(假人id)
    local 冷却时间 = self.假人冷却时间[假人id]
    if 冷却时间 then
        local 剩余时间 = 冷却时间 - os.time()
        if 剩余时间 > 0 then
            local 剩余分钟 = math.ceil(剩余时间 / 60)
            return true, 剩余分钟 -- 在冷却中，返回剩余分钟
        else
            -- 已过期，清理
            self.假人冷却时间[假人id] = nil
            return false, 0 -- 不在冷却中
        end
    end
    return false, 0 -- 不在冷却中
end

-- GM清理假人战斗状态
function 假人战斗处理类:GM清理假人战斗状态(玩家id, 假人id)
    if not 玩家数据[玩家id] then
        return
    end

    if self.战斗中假人[假人id] then
        self.战斗中假人[假人id] = nil
        常规提示(玩家id, "#Y/已清理假人ID:" .. 假人id .. "的战斗状态")
        self:调试日志("GM清理假人战斗状态，假人ID:" .. 假人id .. "，玩家ID:" .. 玩家id)
    else
        常规提示(玩家id, "#Y/假人ID:" .. 假人id .. "不在战斗中")
    end
end

-- GM清理所有假人战斗状态
function 假人战斗处理类:GM清理所有假人战斗状态(玩家id)
    if not 玩家数据[玩家id] then
        return
    end

    local 清理数量 = 0
    for 假人id, _ in pairs(self.战斗中假人) do
        self.战斗中假人[假人id] = nil
        清理数量 = 清理数量 + 1
    end

    常规提示(玩家id, "#Y/已清理所有假人战斗状态，共清理:" .. 清理数量 .. "个")
    self:调试日志("GM清理所有假人战斗状态，清理数量:" .. 清理数量 .. "，玩家ID:" .. 玩家id)
end

-- 检查挑战次数限制
function 假人战斗处理类:检查挑战次数限制(玩家id, 假人id, 难度等级)
    local 今日 = os.date("%Y%m%d")
    local 玩家挑战记录 = self.假人挑战次数[玩家id] or {}
    local 假人挑战记录 = 玩家挑战记录[假人id] or {}

    -- 获取该难度的每日限制
    local 每日限制 = 战斗配置.挑战次数配置.不同难度限制[难度等级] or 战斗配置.挑战次数配置.默认每日限制

    -- 检查是否无限制
    if 每日限制 == 战斗配置.挑战次数配置.无限制标记 then
        return true
    end

    -- 检查今日挑战次数
    local 今日挑战次数 = 假人挑战记录[今日] or 0
    if 今日挑战次数 >= 每日限制 then
        local 限制次数 = 每日限制
        常规提示(玩家id, "#Y/今日挑战次数已达上限（" .. 限制次数 .. "次），明天再来挑战吧！")
        return false
    end

    return true
end

-- 记录挑战次数
function 假人战斗处理类:记录挑战次数(玩家id, 假人id)
    local 今日 = os.date("%Y%m%d")
    local 玩家挑战记录 = self.假人挑战次数[玩家id] or {}
    local 假人挑战记录 = 玩家挑战记录[假人id] or {}

    假人挑战记录[今日] = (假人挑战记录[今日] or 0) + 1
    玩家挑战记录[假人id] = 假人挑战记录
    self.假人挑战次数[玩家id] = 玩家挑战记录

    self:调试日志("记录挑战次数，玩家:" .. 玩家id .. "，假人:" .. 假人id .. "，今日次数:" .. 假人挑战记录[今日])
end

-- 获取挑战次数信息
function 假人战斗处理类:获取挑战次数信息(玩家id, 假人id, 难度等级)
    local 今日 = os.date("%Y%m%d")
    local 玩家挑战记录 = self.假人挑战次数[玩家id] or {}
    local 假人挑战记录 = 玩家挑战记录[假人id] or {}
    local 今日挑战次数 = 假人挑战记录[今日] or 0

    local 每日限制 = 战斗配置.挑战次数配置.不同难度限制[难度等级] or 战斗配置.挑战次数配置.默认每日限制
    if 每日限制 == 战斗配置.挑战次数配置.无限制标记 then
        每日限制 = "无限制"
    end

    return 今日挑战次数, 每日限制
end

-- 计算随机奖励
function 假人战斗处理类:计算随机奖励(基础奖励, 难度等级)
    -- 参数验证
    if not 基础奖励 or 基础奖励 <= 0 then
        self:调试日志("基础奖励无效：" .. tostring(基础奖励))
        return 1000 -- 返回最小奖励
    end

    if not 难度等级 or 难度等级 < 1 or 难度等级 > 5 then
        难度等级 = 2 -- 默认普通难度
    end

    -- 获取该难度的随机范围
    local 随机范围 = 战斗配置.奖励随机配置.不同难度随机范围[难度等级] or 战斗配置.奖励随机配置.基础随机系数

    -- 计算随机系数
    local 随机系数 = 取随机数(随机范围.最小 * 100, 随机范围.最大 * 100) / 100

    -- 检查暴击
    if math.random() < 战斗配置.奖励随机配置.暴击概率 then
        随机系数 = 随机系数 * 战斗配置.奖励随机配置.暴击倍数
        self:调试日志("奖励暴击！难度:" .. 难度等级 .. "，暴击倍数:" .. 战斗配置.奖励随机配置.暴击倍数)
    end

    local 最终奖励 = math.floor(基础奖励 * 随机系数)

    -- 确保最小奖励
    if 最终奖励 <= 0 then
        最终奖励 = math.floor(基础奖励 * 0.5) -- 至少获得50%的基础奖励
        self:调试日志("最终奖励为0，调整为：" .. 最终奖励)
    end

    self:调试日志("奖励随机化，基础:" .. 基础奖励 .. "，难度:" .. 难度等级 .. "，随机系数:" .. 随机系数 .. "，最终:" .. 最终奖励)

    return 最终奖励
end

-- 计算道具奖励
function 假人战斗处理类:计算道具奖励(难度等级)
    local 道具奖励表 = 战斗配置.道具奖励配置.道具奖励表
    local 难度道具数量 = {1, 1, 1, 2, 2} -- 不同难度获得的道具种类数量
    local 获得道具数量 = 难度道具数量[难度等级] or 1

    local 获得道具列表 = {}

    -- 随机选择指定数量的道具
    for i = 1, 获得道具数量 do
        local 随机道具 = 道具奖励表[取随机数(1, #道具奖励表)]
        local 道具名 = 随机道具[1]
        local 道具数量范围 = 随机道具[2]

        -- 计算道具数量
        local 道具数量 = 取随机数(道具数量范围[1], 道具数量范围[2])

        -- 根据难度调整数量
        local 难度数量倍率 = {1.0, 1.2, 1.5, 2.0, 3.0} -- 不同难度的数量倍率
        local 数量倍率 = 难度数量倍率[难度等级] or 1.0
        道具数量 = math.floor(道具数量 * 数量倍率)

        table.insert(获得道具列表, {道具名 = 道具名, 数量 = 道具数量})
    end

    self:调试日志("道具奖励计算，难度:" .. 难度等级 .. "，获得道具数量:" .. 获得道具数量)

    return 获得道具列表
end

-- 显示假人状态
function 假人战斗处理类:显示假人状态(玩家id, 假人id, 假人名称, 难度等级)
    local 状态信息 = {}

    -- 检查战斗状态
    if self.战斗中假人[假人id] then
        table.insert(状态信息, "#R正在战斗中")
    else
        table.insert(状态信息, "#G可以挑战")
    end

    -- 检查冷却状态
    local 在冷却中, 剩余分钟 = self:获取假人冷却状态(假人id)
    if 在冷却中 then
        table.insert(状态信息, "#Y冷却中（剩余" .. 剩余分钟 .. "分钟）")
    end

    -- 检查挑战次数
    local 今日挑战次数, 每日限制 = self:获取挑战次数信息(玩家id, 假人id, 难度等级)
    if 每日限制 ~= "无限制" then
        table.insert(状态信息, "#W今日挑战：" .. 今日挑战次数 .. "/" .. 每日限制)
    else
        table.insert(状态信息, "#W今日挑战：" .. 今日挑战次数 .. "/无限制")
    end

    -- 显示难度信息
    local 难度配置 = self.难度配置[难度等级]
    if 难度配置 then
        table.insert(状态信息, 难度配置.颜色 .. 难度配置.名称 .. "难度")
    end

    -- 组合状态信息
    local 状态文本 = table.concat(状态信息, " | ")
    常规提示(玩家id, "#Y/" .. 假人名称 .. "状态：" .. 状态文本)

    self:调试日志("显示假人状态，假人:" .. 假人名称 .. "，状态:" .. 状态文本)
end

-- GM命令：显示假人状态
function 假人战斗处理类:GM显示假人状态(玩家id, 假人id)
    local 假人数据 = self.假人战斗映射[假人id]
    if not 假人数据 then
        常规提示(玩家id, "#Y/未找到该假人数据")
        return
    end

    -- 显示所有难度的状态
    for 难度等级 = 1, 5 do
        self:显示假人状态(玩家id, 假人id, 假人数据.名称, 难度等级)
    end
end

-- GM命令：重置假人冷却时间
function 假人战斗处理类:GM重置假人冷却(玩家id, 假人id)
    if self.假人冷却时间[假人id] then
        self.假人冷却时间[假人id] = nil
        常规提示(玩家id, "#G/已重置假人冷却时间")
        self:调试日志("GM重置假人冷却时间，假人ID:" .. 假人id)
    else
        常规提示(玩家id, "#Y/该假人不在冷却中")
    end
end

-- GM命令：设置挑战次数限制
function 假人战斗处理类:GM设置挑战次数限制(玩家id, 难度等级, 限制次数)
    if 难度等级 >= 1 and 难度等级 <= 5 then
        战斗配置.挑战次数配置.不同难度限制[难度等级] = 限制次数
        常规提示(玩家id, "#G/已设置难度" .. 难度等级 .. "的挑战次数限制为" .. 限制次数 .. "次")
        self:调试日志("GM设置挑战次数限制，难度:" .. 难度等级 .. "，限制:" .. 限制次数)
    else
        常规提示(玩家id, "#Y/难度等级必须在1-5之间")
    end
end

-- GM命令：显示道具奖励配置
function 假人战斗处理类:GM显示道具奖励配置(玩家id)
    local 配置信息 = "#Y道具奖励配置：\n"

    -- 显示道具奖励表
    配置信息 = 配置信息 .. "#W道具奖励表：\n"
    for i, 道具配置 in ipairs(战斗配置.道具奖励配置.道具奖励表) do
        配置信息 = 配置信息 .. "#G" .. i .. ". " .. 道具配置[1] .. " (数量:" .. 道具配置[2][1] .. "-" .. 道具配置[2][2] .. ")\n"
    end

    -- 显示不同难度概率
    配置信息 = 配置信息 .. "\n#W不同难度道具概率：\n"
    for 难度等级 = 1, 5 do
        local 难度名称 = self.难度配置[难度等级] and self.难度配置[难度等级].名称 or "未知"
        配置信息 = 配置信息 .. "#Y" .. 难度等级 .. "." .. 难度名称 .. "难度：\n"
        local 概率表 = 战斗配置.道具奖励配置.不同难度道具概率[难度等级]
        if 概率表 then
            for 道具名, 概率 in pairs(概率表) do
                配置信息 = 配置信息 .. "#G  " .. 道具名 .. ": " .. (概率 * 100) .. "%\n"
            end
        end
    end

    常规提示(玩家id, 配置信息)
end

-- GM命令：添加道具奖励
function 假人战斗处理类:GM添加道具奖励(玩家id, 道具名, 最小数量, 最大数量)
    -- 检查是否已存在
    for _, 道具配置 in ipairs(战斗配置.道具奖励配置.道具奖励表) do
        if 道具配置[1] == 道具名 then
            常规提示(玩家id, "#Y/道具" .. 道具名 .. "已存在")
            return
        end
    end

    -- 添加新道具
    table.insert(战斗配置.道具奖励配置.道具奖励表, {道具名, {最小数量, 最大数量}})

    -- 为所有难度添加默认概率
    for 难度等级 = 1, 5 do
        if 战斗配置.道具奖励配置.不同难度道具概率[难度等级] then
            战斗配置.道具奖励配置.不同难度道具概率[难度等级][道具名] = 0.1 -- 默认10%概率
        end
    end

    常规提示(玩家id, "#G/已添加道具奖励：" .. 道具名 .. " (数量:" .. 最小数量 .. "-" .. 最大数量 .. ")")
    self:调试日志("GM添加道具奖励，道具:" .. 道具名 .. "，数量范围:" .. 最小数量 .. "-" .. 最大数量)
end

-- GM命令：设置道具概率
function 假人战斗处理类:GM设置道具概率(玩家id, 难度等级, 道具名, 概率)
    if 难度等级 >= 1 and 难度等级 <= 5 then
        if 战斗配置.道具奖励配置.不同难度道具概率[难度等级] then
            战斗配置.道具奖励配置.不同难度道具概率[难度等级][道具名] = 概率
            常规提示(玩家id, "#G/已设置难度" .. 难度等级 .. "的道具" .. 道具名 .. "概率为" .. (概率 * 100) .. "%")
            self:调试日志("GM设置道具概率，难度:" .. 难度等级 .. "，道具:" .. 道具名 .. "，概率:" .. 概率)
        else
            常规提示(玩家id, "#Y/该难度等级不存在")
        end
    else
        常规提示(玩家id, "#Y/难度等级必须在1-5之间")
    end
end

-- 生成假人战斗属性
function 假人战斗处理类:生成假人战斗属性(假人数据, 难度等级, 实力调整系数)
    local 假人属性 = {}
    local 难度信息 = self.难度配置[难度等级 or 2]
    local 总调整系数 = 难度信息.属性倍率 * (实力调整系数 or 1.0)

    -- 基础属性 - 确保假人模型一致
    假人属性.名称 = 假人数据.名称 or "战斗假人"
    假人属性.模型 = 假人数据.模型 or "剑侠客"  -- 使用假人原有模型保持一致
    假人属性.等级 = 取随机数(战斗配置.等级范围.最小, 战斗配置.等级范围.最大)
    假人属性.门派 = 假人数据.门派 or "大唐官府"
    假人属性.称谓 = 假人数据.当前称谓 or 假人数据.称谓
    假人属性.武器 = 假人数据.武器.名称 or nil
    假人属性.武器级别 = 取随机数(战斗配置.等级范围.最小, 战斗配置.等级范围.最大)
    假人属性.染色方案 = 假人数据.染色方案
    假人属性.染色组 = 假人数据.染色组
    假人属性.锦衣 = 假人数据.锦衣
    假人属性.召唤兽 = self:生成假人召唤兽(假人属性.等级, 总调整系数)
    假人属性.技能={}
    假人属性.主动技能=Q_门派法术[假人数据.门派]
    -- self.五维属性 = {"体质","魔力","力量","耐力","敏捷"}
    假人属性.体质 = math.floor(假人属性.等级 * 取随机数(战斗配置.属性随机范围.最小, 战斗配置.属性随机范围.最大) * 总调整系数)
    假人属性.魔力 = math.floor(假人属性.等级 * 取随机数(战斗配置.属性随机范围.最小, 战斗配置.属性随机范围.最大) * 总调整系数)
    假人属性.力量 = math.floor(假人属性.等级 * 取随机数(战斗配置.属性随机范围.最小, 战斗配置.属性随机范围.最大) * 总调整系数)
    假人属性.耐力 = math.floor(假人属性.等级 * 取随机数(战斗配置.属性随机范围.最小, 战斗配置.属性随机范围.最大) * 总调整系数)
    假人属性.敏捷 = math.floor(假人属性.等级 * 取随机数(战斗配置.属性随机范围.最小, 战斗配置.属性随机范围.最大) * 总调整系数)
    -- self.基础属性 = {"气血","魔法","命中","伤害","法伤","防御","法防","速度","最大气血","最大魔法"}
    -- 战斗属性（应用难度和实力调整）
    假人属性.气血 = math.floor(假人属性.等级 * 取随机数(8, 12) * 总调整系数)
    假人属性.魔法 = math.floor(假人属性.等级 * 取随机数(6, 10) * 总调整系数)
    假人属性.命中 = math.floor(假人属性.等级 * 取随机数(6, 10) * 总调整系数)
    假人属性.伤害 = math.floor(假人属性.等级 * 取随机数(4, 7) * 总调整系数)
    假人属性.法伤 = math.floor(假人属性.等级 * 取随机数(6, 10) * 总调整系数)
    假人属性.法防 = math.floor(假人属性.等级 * 取随机数(6, 10) * 总调整系数)
    假人属性.防御 = math.floor(假人属性.等级 * 取随机数(3, 6) * 总调整系数)
    假人属性.速度 = math.floor(假人属性.等级 * 取随机数(3, 6) * 总调整系数)
    假人属性.最大气血 = math.floor(假人属性.等级 * 取随机数(3, 6) * 总调整系数)
    假人属性.最大魔法 = math.floor(假人属性.等级 * 取随机数(3, 6) * 总调整系数)
    --假人属性.灵力 = math.floor(假人属性.等级 * 取随机数(4, 7) * 总调整系数)


    -- 五行属性
    local 五行列表 = {"金", "木", "水", "火", "土"}
    假人属性.五行 = 五行列表[取随机数(1, #五行列表)]

    -- 修炼等级（根据难度调整）
    local 修炼基数 = math.floor(10 * 总调整系数)
    假人属性.攻击修炼 = 取随机数(修炼基数, 修炼基数 + 10)
    假人属性.防御修炼 = 取随机数(修炼基数, 修炼基数 + 10)
    假人属性.法术修炼 = 取随机数(修炼基数, 修炼基数 + 10)
    假人属性.抗法修炼 = 取随机数(修炼基数, 修炼基数 + 10)

    -- 装备信息
--    if 假人数据.武器 and 假人数据.武器.名称 then
  --      假人属性.武器 = {
    --        名称 = 假人数据.武器.名称,
      --      造型 = 假人数据.武器.造型,
        --    级别 = 取随机数(60, 80)
        --}
    --end

    -- 外观信息
    --假人属性.染色方案 = 假人数据.染色方案
    --假人属性.染色组 = 假人数据.染色组
    --假人属性.锦衣 = 假人数据.锦衣

    -- 生成召唤兽


    -- 战斗AI设置
    假人属性.AI类型 = "智能假人"
    假人属性.战斗风格 = 假人数据.显示类型 == "组队战斗" and "团队配合" or "单人战斗"
    假人属性.难度等级 = 难度等级
    假人属性.奖励倍率 = 难度信息.奖励倍率

    return 假人属性
end

-- 生成假人召唤兽
function 假人战斗处理类:生成假人召唤兽(等级, 调整系数)
    local 召唤兽列表 = {"超级青鸾", "超级腾蛇", "超级赤焰兽", "超级神牛", "超级泡泡", "超级神虎", "超级海豚", "超级白泽", "超级玉兔", "超级红孩儿"}
    local 召唤兽 = {}
    local 修炼基数 = math.floor(10 * 调整系数)
--self.基础属性 = {"气血","魔法","命中","伤害","法伤","防御","法防","速度","最大气血","最大魔法"}
    召唤兽.名称 = 召唤兽列表[取随机数(1, #召唤兽列表)]
    召唤兽.等级 = 等级
    召唤兽.气血 = math.floor(等级 * 取随机数(6, 10) * 调整系数)
    召唤兽.魔法 = math.floor(等级 * 取随机数(4, 8) * 调整系数)
    召唤兽.命中 = math.floor(等级 * 取随机数(6, 10) * 调整系数)
    召唤兽.伤害 = math.floor(等级 * 取随机数(3, 6) * 调整系数)
    召唤兽.法伤 = math.floor(等级 * 取随机数(6, 10) * 调整系数)
    召唤兽.防御 = math.floor(等级 * 取随机数(2, 5) * 调整系数)
    召唤兽.法防 = math.floor(等级 * 取随机数(6, 10) * 调整系数)
    召唤兽.速度 = math.floor(等级 * 取随机数(2, 5) * 调整系数)
    召唤兽.最大气血 = math.floor(等级 * 取随机数(6, 10) * 调整系数)
    召唤兽.最大魔法 = math.floor(等级 * 取随机数(6, 10) * 调整系数)
    -- self.五维属性 = {"体质","魔力","力量","耐力","敏捷"}
    召唤兽.体质 = math.floor(等级 * 取随机数(8, 12) * 调整系数)
    召唤兽.魔力 = math.floor(等级 * 取随机数(8, 12) * 调整系数)
    召唤兽.力量 = math.floor(等级 * 取随机数(8, 12) * 调整系数)
    召唤兽.耐力 = math.floor(等级 * 取随机数(8, 12) * 调整系数)
    召唤兽.敏捷 = math.floor(等级 * 取随机数(8, 12) * 调整系数)
    召唤兽.攻击控制力=取随机数(修炼基数, 修炼基数 + 10)
    召唤兽.法术控制力=取随机数(修炼基数, 修炼基数 + 10)
    召唤兽.防御控制力=取随机数(修炼基数, 修炼基数 + 10)
    召唤兽.抗法控制力=取随机数(修炼基数, 修炼基数 + 10)

    -- 随机技能
    local 技能列表 = {"超级奔雷咒", "超级地狱烈火", "超级水漫金山", "超级泰山压顶", "八凶法阵", "叱咤风云", "天降灵葫", "流沙轻音", "食指大动", "扶摇万里", "落叶萧萧"}
    local 被动技能列表 = {"超级毒","超级夜战","超级反震","超级吸血","超级连击","超级飞行","超级隐身",
               "超级感知","超级再生","超级冥思","超级驱鬼","超级慧根", "超级必杀","超级幸运",
               "超级神迹","超级招架","超级永恒","超级敏捷","超级偷袭","超级强力","超级防御",
               "超级盾气","超级合纵","超级驱怪","超级魔之心","超级奔雷咒","超级泰山压顶","超级水漫金山",
               "超级地狱烈火","超级进击必杀","超级进击法暴","超级法术连击","超级法术暴击",
               "超级法术波动","超级壁垒击破","超级法术抵抗","超级精神集中","超级否定信仰",
               "超级雷属性吸收","超级土属性吸收","超级水属性吸收","超级火属性吸收"}

    -- 使用数组存储技能
    召唤兽.主动技能 = {}
    local 主动技能数量 = 取随机数(2, 3)
    for i = 1, 主动技能数量 do
        local 主动技能 = 技能列表[取随机数(1, #技能列表)]
        -- 检查重复（数组中查找）
        local 已存在 = false
        for _, 技能 in ipairs(召唤兽.主动技能) do
            if 技能 == 主动技能 then
                已存在 = true
                break
            end
        end

        if not 已存在 then
            table.insert(召唤兽.主动技能, 主动技能)
        end
    end

    召唤兽.被动技能 = {}
    local 被动技能数量 = 取随机数(2, #被动技能列表)
    for i = 1, 被动技能数量 do
        local 被动技能 = 被动技能列表[取随机数(1, #被动技能列表)]
        -- 检查重复
        local 已存在 = false
        for _, 技能 in ipairs(召唤兽.被动技能) do
            if 技能 == 被动技能 then
                已存在 = true
                break
            end
        end

        if not 已存在 then
            table.insert(召唤兽.被动技能, 被动技能)
        end
    end

    return 召唤兽
end

-- 战斗结束清理（胜利时调用，负责清理、奖励发放和冷却设置）
function 假人战斗处理类:战斗结束清理(假人id列表, 胜利方)
    -- 检查新的数据结构
    if 假人id列表 and 假人id列表.假人id then
        -- 新数据结构：包含难度信息的表
        for _, 假人id in ipairs(假人id列表.假人id or {}) do
            self:设置假人战斗状态(假人id, false)
        end

        -- 发放奖励并设置冷却时间
        if 胜利方 and #胜利方 > 0 then
            self:发放战斗奖励(胜利方, 假人id列表.奖励倍率, 假人id列表.难度名称, 假人id列表.假人名称, 假人id列表.难度等级)

            -- 战斗胜利时设置假人冷却时间
            for _, 假人id in ipairs(假人id列表.假人id or {}) do
                self:设置假人冷却时间(假人id, 假人id列表.难度等级)
            end

            self:调试日志("战斗胜利，发放奖励并设置冷却时间")
        end

        self:调试日志("战斗结束清理完成，涉及假人数量：" .. #(假人id列表.假人id or {}) .. "，难度：" .. (假人id列表.难度名称 or "未知") .. "，假人：" .. (假人id列表.假人名称 or "未知"))
    else
        -- 兼容旧数据结构：纯数组
        for _, 假人id in ipairs(假人id列表 or {}) do
            self:设置假人战斗状态(假人id, false)
        end

        -- 发放奖励并设置冷却时间
        if 胜利方 and #胜利方 > 0 then
            self:发放战斗奖励(胜利方)

            -- 战斗胜利时设置假人冷却时间
            for _, 假人id in ipairs(假人id列表 or {}) do
                self:设置假人冷却时间(假人id, 2) -- 默认难度
            end

            self:调试日志("战斗胜利，发放奖励并设置冷却时间")
        end

        self:调试日志("战斗结束清理完成，涉及假人数量：" .. #(假人id列表 or {}))
    end
end

-- 清理假人战斗状态（专门用于失败时清理）
function 假人战斗处理类:清理假人战斗状态(假人id列表)
    -- 检查新的数据结构
    if 假人id列表 and 假人id列表.假人id then
        -- 新数据结构：包含难度信息的表
        for _, 假人id in ipairs(假人id列表.假人id or {}) do
            self:设置假人战斗状态(假人id, false)
        end
        self:调试日志("清理假人战斗状态完成，涉及假人数量：" .. #(假人id列表.假人id or {}) .. "，难度：" .. (假人id列表.难度名称 or "未知") .. "，假人：" .. (假人id列表.假人名称 or "未知"))
    else
        -- 兼容旧数据结构：纯数组
        for _, 假人id in ipairs(假人id列表 or {}) do
            self:设置假人战斗状态(假人id, false)
        end
        self:调试日志("清理假人战斗状态完成，涉及假人数量：" .. #(假人id列表 or {}))
    end
end

-- 发放战斗奖励
function 假人战斗处理类:发放战斗奖励(id组, 奖励倍率, 难度名称, 假人名称, 难度等级)
    local 实际倍率 = 奖励倍率 or 1.0
    local 难度文本 = 难度名称 or "普通"
    local 假人文本 = 假人名称 or "假人"
    local 难度等级 = 难度等级 or 2 -- 默认普通难度

    -- 记录是否已发送全服消息
    local 已发送全服消息 = false
    local 全部道具 = {} -- 改为数组收集所有道具

    for j,v in ipairs(id组) do
        if 玩家数据[v] then
            -- 使用随机化奖励计算
            local 基础经验奖励 = 取随机数(战斗配置.经验奖励范围.最小, 战斗配置.经验奖励范围.最大)
            local 基础银子奖励 = 取随机数(战斗配置.银子奖励范围.最小, 战斗配置.银子奖励范围.最大)

            -- 确保基础奖励不为0
            if 基础经验奖励 <= 0 then
                基础经验奖励 = 战斗配置.经验奖励范围.最小
                self:调试日志("基础经验奖励为0，调整为：" .. 基础经验奖励)
            end
            if 基础银子奖励 <= 0 then
                基础银子奖励 = 战斗配置.银子奖励范围.最小
                self:调试日志("基础银子奖励为0，调整为：" .. 基础银子奖励)
            end

            -- 添加调试信息
            self:调试日志("基础经验奖励:" .. 基础经验奖励 .. "，基础银子奖励:" .. 基础银子奖励)
            self:调试日志("难度等级:" .. 难度等级 .. "，实际倍率:" .. 实际倍率)

            local 经验奖励 = self:计算随机奖励(基础经验奖励, 难度等级) * 实际倍率
            local 银子奖励 = self:计算随机奖励(基础银子奖励, 难度等级) * 实际倍率

            -- 确保最终奖励不为0
            if 经验奖励 <= 0 then
                经验奖励 = 1000
                self:调试日志("经验奖励为0，调整为：" .. 经验奖励)
            end
            if 银子奖励 <= 0 then
                银子奖励 = 1000
                self:调试日志("银子奖励为0，调整为：" .. 银子奖励)
            end

            -- 添加最终奖励调试信息
            self:调试日志("最终经验奖励:" .. 经验奖励 .. "，最终银子奖励:" .. 银子奖励)

            -- 计算道具奖励
            local 获得道具列表 = self:计算道具奖励(难度等级)

            -- 给予奖励
            玩家数据[v].角色:添加银子(银子奖励)
            玩家数据[v].角色:添加经验(经验奖励, "假人战斗", 1)

            -- 给予道具奖励
            local 个人道具文本 = ""
            for i, 道具信息 in ipairs(获得道具列表) do
                local 道具名 = 道具信息.道具名
                local 道具数量 = 道具信息.数量

                if 道具名 == "仙玉" then
                    共享货币[玩家数据[v].账号]:添加仙玉(道具数量, v, "假人战斗奖励")
                elseif 道具名 == "银子" then
                    玩家数据[v].角色:添加银子(道具数量)
                else
                    -- 给予其他道具
                    玩家数据[v].道具:给予道具(v, 道具名, 道具数量, nil, nil)
                    -- 收集道具信息用于全服消息
                    table.insert(全部道具, 道具名)
                end

                -- 构建个人道具文本
                if i == 1 then
                    个人道具文本 = 道具名 .. "X" .. 道具数量
                else
                    个人道具文本 = 个人道具文本 .. "、" .. 道具名 .. "X" .. 道具数量
                end
            end

            -- 发送奖励消息
            local 难度配置 = self.难度配置[难度等级]
            local 难度颜色 = 难度配置 and 难度配置.颜色 or "#W"
            发送数据(玩家数据[v].连接id,38,{内容="#Y你已战胜[" .. 难度颜色 .. 难度文本 .. "]#W" .. 假人文本 .. "，获得#Y" .. 个人道具文本 .. "#W！",频道="xt"})
            --常规提示(v,"#Y获得#W" .. 奖励道具 .. "X" .. 奖励数量 .. "#W。")

            -- 发送全服系统消息（只有队长且只发送一次）
            if v == id组[1] and not 已发送全服消息 then
                local 队员信息 = ""
                local 假人信息 = ""

                -- 构建队员信息
                if #id组 > 1 then
                    for i = 2, #id组 do
                        if i == 2 then
                            队员信息 = 玩家数据[id组[i]].角色.数据.名称
                        else
                            队员信息 = 队员信息 .. "、" .. 玩家数据[id组[i]].角色.数据.名称
                        end
                    end
                    队员信息 = "带领队员#W" .. 队员信息
                end

                -- 构建假人信息
                if 假人id列表 and 假人id列表.假人id then
                    for i, 假人id in ipairs(假人id列表.假人id) do
                        local 假人数据 = self.假人战斗映射[假人id]
                        if 假人数据 then
                            if i == 1 then
                                假人信息 = 假人数据.名称
                            else
                                假人信息 = 假人信息 .. "、" .. 假人数据.名称
                            end
                        end
                    end
                    假人信息 = 假人信息 .. "#Y的队伍"
                else
                    假人信息 = 假人文本
                end

                -- 构建道具信息（每个队员只显示一种道具）
                local 道具文本 = ""
                if #全部道具 > 0 then
                    -- 每个队员只取一种道具
                    local 队员道具 = {}
                    local 队员数量 = #id组
                    local 道具索引 = 1

                    for i = 1, 队员数量 do
                        if 道具索引 <= #全部道具 then
                            table.insert(队员道具, 全部道具[道具索引])
                            道具索引 = 道具索引 + 1
                        end
                    end

                    -- 构建道具文本
                    if #队员道具 == 1 then
                        道具文本 = "，获得#W" .. 队员道具[1] .. "#W等丰厚奖励"
                    else
                        道具文本 = "，获得#W" .. table.concat(队员道具, "、") .. "#Y等丰厚奖励#91"
                    end
                end

                广播消息({内容=format("#Y/由#Y队长#W/%s#Y%s#Y战胜了#W/%s#Y%s！",玩家数据[v].角色.数据.名称, 队员信息, 假人信息, 道具文本),频道="xt"})
                已发送全服消息 = true
            end
            -- 构建道具调试信息
            local 道具调试文本 = ""
            for i, 道具信息 in ipairs(获得道具列表) do
                if i == 1 then
                    道具调试文本 = 道具信息.道具名 .. "X" .. 道具信息.数量
                else
                    道具调试文本 = 道具调试文本 .. "、" .. 道具信息.道具名 .. "X" .. 道具信息.数量
                end
            end

            self:调试日志("发放战斗奖励完成，难度：" .. 难度文本 .. "，倍率：" .. 实际倍率 .. "，假人：" .. 假人文本 .. "，经验：" .. 经验奖励 .. "，银子：" .. 银子奖励 .. "，道具：" .. 道具调试文本)
        end
    end
end

-- 在假人玩家类初始化时注册所有假人
function 假人战斗处理类:注册所有假人()
    self:调试日志("注册所有假人被调用")

    if 假人玩家类 then
        self:调试日志("假人玩家类存在")

        -- 注册普通假人
        if 假人玩家类.假人单位 then
            local 普通假人数量 = 0
            for _, 假人 in pairs(假人玩家类.假人单位) do
                self:注册假人(假人)
                普通假人数量 = 普通假人数量 + 1
            end
            self:调试日志("注册普通假人数量:" .. 普通假人数量)
        else
            self:调试日志("假人玩家类.假人单位不存在")
        end

        -- 注册长安战斗假人
        if 假人玩家类.长安战斗假人 then
            local 战斗假人数量 = 0
            for _, 假人 in pairs(假人玩家类.长安战斗假人) do
                self:注册假人(假人)
                战斗假人数量 = 战斗假人数量 + 1
            end
            self:调试日志("注册长安战斗假人数量:" .. 战斗假人数量)
        else
            self:调试日志("假人玩家类.长安战斗假人不存在")
        end

        -- 输出总注册数量
        local 总注册数量 = 0
        for _ in pairs(self.假人战斗映射) do
            总注册数量 = 总注册数量 + 1
        end
        self:调试日志("假人战斗映射中总假人数量:" .. 总注册数量)

    else
        self:调试日志("假人玩家类不存在")
    end
end

-- 检查假人是否可以被攻击
function 假人战斗处理类:假人可被攻击(假人id)
    local 假人数据 = self:查找假人数据(假人id)
    if not 假人数据 then
        return false
    end

    -- 只有战斗假人或有战斗开关的假人才能被攻击
    return 假人数据.战斗假人 or 假人数据.战斗开关
end

return 假人战斗处理类